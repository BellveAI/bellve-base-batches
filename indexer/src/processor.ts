/* tslint:disable */
/* eslint-disable */

import { Counter } from '@sentio/sdk';
import { EthChainId } from '@sentio/sdk/eth';
import {
  BELLVE_PROVISIONER_ADDRESS,
  START_BLOCK,
  BASE_SEPOLIA_CHAIN_ID,
} from './constant.js';
import {
  DepositRequestEntity,
  WithdrawalRequestEntity,
  BatchDepositEntity,
  BatchWithdrawalEntity,
  AccountNFTStateEntity,
} from './entities.js';

// Import will be generated by Sentio after running `sentio gen`
// For now, we'll use a placeholder structure
// The actual BellveProvisionerProcessor will be generated from ABI

// Counters for metrics
const DepositRequestedCounter = Counter.register('deposit_requested_counter');
const DepositResolvedCounter = Counter.register('deposit_resolved_counter');
const WithdrawalRequestedCounter = Counter.register('withdrawal_requested_counter');
const WithdrawalResolvedCounter = Counter.register('withdrawal_resolved_counter');
const BatchDepositSubmittedCounter = Counter.register('batch_deposit_submitted_counter');
const BatchWithdrawalSubmittedCounter = Counter.register('batch_withdrawal_submitted_counter');

// ============= STARTUP CONFIGURATION LOGGING =============
console.info('🚀 Bellve Buildathon Indexer Starting Up');
console.info('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
console.info('');
console.info('⚠️  TESTNET ONLY - Base Sepolia');
console.info('  - This indexer is for EVALUATION purposes only');
console.info('  - NOT production ready');
console.info('  - Subject to change without notice');
console.info('');
console.info('📊 Indexing Configuration:');
console.info(`   Chain ID: ${BASE_SEPOLIA_CHAIN_ID}`);
console.info(`   Start Block: ${START_BLOCK}`);
console.info('');
console.info('📋 Contract Addresses:');
console.info(`   BELLVE_PROVISIONER: ${BELLVE_PROVISIONER_ADDRESS}`);
console.info('');
console.info('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
console.info('');

// Example processor structure (will be replaced by generated code after ABIs are added)
// This shows the pattern for event handlers

/*
BellveProvisionerProcessor.bind({
  address: BELLVE_PROVISIONER_ADDRESS,
  network: EthChainId.BASE_SEPOLIA,
  startBlock: START_BLOCK,
})
  .onEventDepositRequested(async (event, ctx) => {
    const depositHash = event.args.depositHash;
    const user = event.args.user;
    const token = event.args.token;
    const amount = event.args.amount.toString();
    const minUnitsOut = event.args.minUnitsOut.toString();
    const batchWindow = Number(event.args.batchWindow);
    const riskProfile = event.args.riskProfile;

    // Store deposit request entity
    await ctx.store.upsert(
      new DepositRequestEntity({
        id: depositHash,
        user: user.toLowerCase(),
        token: token.toLowerCase(),
        amount,
        minUnitsOut,
        batchWindow,
        blockNumber: Number(ctx.blockNumber),
        timestamp: new Date(Number(ctx.timestamp) * 1000),
        resolved: false,
        riskProfile,
      })
    );

    // Increment counter
    DepositRequestedCounter.add(ctx, 1, {
      user: user.toLowerCase(),
      riskProfile: riskProfile.toString(),
    });

    ctx.meter.Counter('deposit_requested').add(1);
  })

  .onEventWithdrawalRequested(async (event, ctx) => {
    const withdrawalHash = event.args.withdrawalHash;
    const user = event.args.user;
    const token = event.args.token;
    const shares = event.args.shares.toString();
    const minTokensOut = event.args.minTokensOut.toString();
    const batchWindow = Number(event.args.batchWindow);
    const riskProfile = event.args.riskProfile;

    // Store withdrawal request entity
    await ctx.store.upsert(
      new WithdrawalRequestEntity({
        id: withdrawalHash,
        user: user.toLowerCase(),
        token: token.toLowerCase(),
        shares,
        minTokensOut,
        batchWindow,
        blockNumber: Number(ctx.blockNumber),
        timestamp: new Date(Number(ctx.timestamp) * 1000),
        resolved: false,
        riskProfile,
      })
    );

    // Increment counter
    WithdrawalRequestedCounter.add(ctx, 1, {
      user: user.toLowerCase(),
      riskProfile: riskProfile.toString(),
    });

    ctx.meter.Counter('withdrawal_requested').add(1);
  })

  .onEventBatchDepositSubmitted(async (event, ctx) => {
    const batchWindow = Number(event.args.batchWindow);
    const batchHash = event.args.batchHash;
    const totalAmount = event.args.totalAmount.toString();
    const depositCount = Number(event.args.depositCount);

    const entityId = `${batchWindow}-${batchHash}`;

    // Store batch deposit entity
    await ctx.store.upsert(
      new BatchDepositEntity({
        id: entityId,
        batchWindow,
        totalAmount,
        depositCount,
        blockNumber: Number(ctx.blockNumber),
        timestamp: new Date(Number(ctx.timestamp) * 1000),
        resolved: false,
      })
    );

    // Increment counter
    BatchDepositSubmittedCounter.add(ctx, 1);

    ctx.meter.Counter('batch_deposit_submitted').add(1);
  })

  .onEventBatchWithdrawalSubmitted(async (event, ctx) => {
    const batchWindow = Number(event.args.batchWindow);
    const batchHash = event.args.batchHash;
    const totalShares = event.args.totalShares.toString();
    const withdrawalCount = Number(event.args.withdrawalCount);

    const entityId = `${batchWindow}-${batchHash}`;

    // Store batch withdrawal entity
    await ctx.store.upsert(
      new BatchWithdrawalEntity({
        id: entityId,
        batchWindow,
        totalShares,
        withdrawalCount,
        blockNumber: Number(ctx.blockNumber),
        timestamp: new Date(Number(ctx.timestamp) * 1000),
        resolved: false,
      })
    );

    // Increment counter
    BatchWithdrawalSubmittedCounter.add(ctx, 1);

    ctx.meter.Counter('batch_withdrawal_submitted').add(1);
  })

  .onEventDepositResolved(async (event, ctx) => {
    const depositHash = event.args.depositHash;
    const user = event.args.user;
    const shares = event.args.shares.toString();

    // Update deposit request to resolved
    const depositRequest = await ctx.store.get(DepositRequestEntity, depositHash);
    if (depositRequest) {
      depositRequest.resolved = true;
      await ctx.store.upsert(depositRequest);
    }

    // Increment counter
    DepositResolvedCounter.add(ctx, 1, {
      user: user.toLowerCase(),
    });

    ctx.meter.Counter('deposit_resolved').add(1);
  })

  .onEventWithdrawalResolved(async (event, ctx) => {
    const withdrawalHash = event.args.withdrawalHash;
    const user = event.args.user;
    const tokens = event.args.tokens.toString();

    // Update withdrawal request to resolved
    const withdrawalRequest = await ctx.store.get(WithdrawalRequestEntity, withdrawalHash);
    if (withdrawalRequest) {
      withdrawalRequest.resolved = true;
      await ctx.store.upsert(withdrawalRequest);
    }

    // Increment counter
    WithdrawalResolvedCounter.add(ctx, 1, {
      user: user.toLowerCase(),
    });

    ctx.meter.Counter('withdrawal_resolved').add(1);
  });
*/

// Note: The above processor code will work once ABIs are copied to indexer/abis/
// and `sentio gen` is run to generate TypeScript types from the ABIs.

console.info('✅ Bellve Indexer processor loaded successfully');
console.info('   Waiting for events from Base Sepolia...');
console.info('');

